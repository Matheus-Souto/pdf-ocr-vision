import os
import io
import tempfile
from typing import List, Optional
from pathlib import Path

import uvicorn
from fastapi import FastAPI, File, UploadFile, HTTPException, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from pdf2image import convert_from_bytes
from PIL import Image
import aiofiles
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

app = FastAPI(
    title="PDF OCR Vision API (DEMO)",
    description="API DEMO para extra√ß√£o de texto de arquivos PDF - Funcionando sem Google Cloud Vision",
    version="1.0.0-demo"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configura√ß√µes
UPLOAD_DIR = os.getenv("UPLOAD_DIR", "temp_uploads")

# Criar diret√≥rio de upload se n√£o existir
Path(UPLOAD_DIR).mkdir(exist_ok=True)

class TextExtractionResponse(BaseModel):
    """Modelo de resposta para extra√ß√£o de texto"""
    text: str
    confidence: float
    pages: List[dict]
    total_pages: int
    success: bool
    message: str
    is_demo: bool = True

def pdf_to_images(pdf_bytes: bytes) -> List[Image.Image]:
    """Converte PDF em lista de imagens"""
    try:
        images = convert_from_bytes(pdf_bytes, dpi=300)
        return images
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Erro ao converter PDF: {str(e)}")

def extract_text_demo(image: Image.Image, page_number: int) -> dict:
    """Simula extra√ß√£o de texto sem usar Google Cloud Vision"""
    
    # Simular texto extra√≠do baseado no tamanho da imagem
    width, height = image.size
    simulated_texts = [
        f"DOCUMENTO SIMULADO - P√ÅGINA {page_number}",
        f"Dimens√µes da imagem: {width}x{height} pixels",
        f"Esta √© uma demonstra√ß√£o da API PDF OCR Vision.",
        f"",
        f"CONTE√öDO DE EXEMPLO:",
        f"‚Ä¢ Item 1 da p√°gina {page_number}",
        f"‚Ä¢ Item 2 da p√°gina {page_number}",
        f"‚Ä¢ Item 3 da p√°gina {page_number}",
        f"",
        f"Para usar OCR real, configure:",
        f"1. Google Cloud Vision API",
        f"2. Credenciais de Service Account",
        f"3. Execute: gcloud auth application-default login",
        f"",
        f"Total de pixels processados: {width * height:,}",
        f"Simula√ß√£o conclu√≠da com sucesso!"
    ]
    
    simulated_text = "\n".join(simulated_texts)
    
    return {
        "text": simulated_text,
        "confidence": 0.95,  # Simular alta confian√ßa
        "words_count": len(simulated_text.split())
    }

@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes da API"""
    return {
        "message": "PDF OCR Vision API (MODO DEMO)",
        "version": "1.0.0-demo",
        "description": "API DEMO - Funcionando sem Google Cloud Vision para testes",
        "status": "üöß MODO DEMONSTRA√á√ÉO üöß",
        "endpoints": {
            "extract_text": "/extract-text",
            "extract_text_image": "/extract-text-image",
            "health": "/health",
            "docs": "/docs"
        },
        "note": "Esta vers√£o simula extra√ß√£o de texto. Para OCR real, configure Google Cloud Vision."
    }

@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de"""
    return {
        "status": "healthy",
        "mode": "demo",
        "google_vision": "not_configured",
        "upload_dir": os.path.exists(UPLOAD_DIR),
        "message": "API funcionando em modo demonstra√ß√£o"
    }

@app.post("/extract-text", response_model=TextExtractionResponse)
async def extract_text_from_pdf(
    file: UploadFile = File(..., description="Arquivo PDF para extra√ß√£o de texto"),
    extract_pages: Optional[str] = Form(None, description="P√°ginas espec√≠ficas para extrair (ex: '1,3,5' ou 'all')")
):
    """
    DEMO: Simula extra√ß√£o de texto de um arquivo PDF
    
    Args:
        file: Arquivo PDF a ser processado
        extract_pages: P√°ginas espec√≠ficas para extrair (opcional, padr√£o: todas)
    
    Returns:
        TextExtractionResponse com texto simulado
    """
    
    # Validar tipo de arquivo
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(
            status_code=400,
            detail="Apenas arquivos PDF s√£o suportados"
        )
    
    try:
        # Ler conte√∫do do arquivo
        pdf_content = await file.read()
        
        # Converter PDF para imagens
        images = pdf_to_images(pdf_content)
        total_pages = len(images)
        
        # Determinar quais p√°ginas processar
        pages_to_process = list(range(total_pages))
        if extract_pages and extract_pages.lower() != "all":
            try:
                specified_pages = [int(p.strip()) - 1 for p in extract_pages.split(",")]
                pages_to_process = [p for p in specified_pages if 0 <= p < total_pages]
            except ValueError:
                raise HTTPException(
                    status_code=400,
                    detail="Formato inv√°lido para p√°ginas. Use n√∫meros separados por v√≠rgula (ex: '1,3,5')"
                )
        
        # Simular extra√ß√£o de texto de cada p√°gina
        extracted_pages = []
        all_text = []
        total_confidence = 0
        
        for i, page_num in enumerate(pages_to_process):
            image = images[page_num]
            page_result = extract_text_demo(image, page_num + 1)
            
            page_data = {
                "page_number": page_num + 1,
                "text": page_result["text"],
                "confidence": page_result["confidence"],
                "words_count": page_result["words_count"]
            }
            
            extracted_pages.append(page_data)
            all_text.append(page_result["text"])
            total_confidence += page_result["confidence"]
        
        # Calcular m√©tricas finais
        avg_confidence = total_confidence / len(pages_to_process) if pages_to_process else 0
        combined_text = "\n\n=== NOVA P√ÅGINA ===\n\n".join(all_text)
        
        return TextExtractionResponse(
            text=combined_text,
            confidence=avg_confidence,
            pages=extracted_pages,
            total_pages=len(pages_to_process),
            success=True,
            message=f"‚úÖ DEMO: Texto simulado para {len(pages_to_process)} p√°gina(s). Configure Google Cloud Vision para OCR real.",
            is_demo=True
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno do servidor: {str(e)}"
        )

@app.post("/extract-text-image", response_model=dict)
async def extract_text_from_image_endpoint(
    file: UploadFile = File(..., description="Arquivo de imagem para extra√ß√£o de texto")
):
    """
    DEMO: Simula extra√ß√£o de texto de uma imagem
    
    Args:
        file: Arquivo de imagem a ser processado
    
    Returns:
        Dicion√°rio com texto simulado
    """
    
    # Validar tipo de arquivo
    allowed_types = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff']
    if not any(file.filename.lower().endswith(ext) for ext in allowed_types):
        raise HTTPException(
            status_code=400,
            detail=f"Tipos de arquivo suportados: {', '.join(allowed_types)}"
        )
    
    try:
        # Ler conte√∫do do arquivo
        image_content = await file.read()
        
        # Abrir imagem com PIL
        image = Image.open(io.BytesIO(image_content))
        
        # Simular extra√ß√£o
        result = extract_text_demo(image, 1)
        
        return {
            "text": result["text"],
            "confidence": result["confidence"],
            "words_count": result["words_count"],
            "success": True,
            "message": "‚úÖ DEMO: Texto simulado para imagem. Configure Google Cloud Vision para OCR real.",
            "is_demo": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno do servidor: {str(e)}"
        )

if __name__ == "__main__":
    # Configura√ß√µes do servidor
    host = os.getenv("HOST", "0.0.0.0")
    port = 8001  # Porta fixa para demo
    debug = os.getenv("DEBUG", "True").lower() == "true"
    
    print(f"üöß Iniciando PDF OCR Vision API (MODO DEMO)...")
    print(f"üìã Documenta√ß√£o dispon√≠vel em: http://localhost:8001/docs")
    print(f"üîç Health check em: http://localhost:8001/health")
    print(f"‚ö†Ô∏è  ATEN√á√ÉO: Esta vers√£o simula extra√ß√£o de texto!")
    print(f"üí° Para OCR real, configure Google Cloud Vision")
    
    uvicorn.run(
        "main_demo:app",
        host=host,
        port=port,
        reload=debug
    ) 