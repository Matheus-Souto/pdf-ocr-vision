#!/bin/bash

echo "‚ö° Corre√ß√£o R√°pida - Usando ADC Existentes"
echo "========================================="

PROJECT_ID="stable-chain-455617-v1"
GCLOUD_CONFIG_DIR="/root/.config/gcloud"
VOLUME_CONFIG_DIR="/app/gcloud-config"

echo "üí° Voc√™ j√° tem Application Default Credentials configuradas!"
echo "   Vamos apenas configurar para usar diretamente sem impersona√ß√£o."
echo ""

# Verificar se as credenciais existem
if [ ! -f "$GCLOUD_CONFIG_DIR/application_default_credentials.json" ]; then
    echo "‚ùå Application Default Credentials n√£o encontradas"
    echo "üí° Execute primeiro: ./complete_impersonation_setup.sh"
    exit 1
fi

echo "‚úÖ Application Default Credentials encontradas"

# Configurar projeto
gcloud config set project $PROJECT_ID

# Remover impersona√ß√£o para usar credenciais diretas
echo "üîß Removendo impersona√ß√£o para usar credenciais diretas..."
gcloud config unset auth/impersonate_service_account

# Configurar vari√°veis de ambiente
export GOOGLE_APPLICATION_CREDENTIALS="$GCLOUD_CONFIG_DIR/application_default_credentials.json"
export GOOGLE_CLOUD_PROJECT="$PROJECT_ID"

# Criar script de configura√ß√£o simples
cat > /app/gcloud-config/simple_credentials.sh << EOF
#!/bin/bash
# Configura√ß√£o simples usando Application Default Credentials

PROJECT_ID="$PROJECT_ID"

# Restaurar configura√ß√£o do gcloud se necess√°rio
if [ -d "/app/gcloud-config" ]; then
    cp -r /app/gcloud-config/* /root/.config/gcloud/ 2>/dev/null || true
fi

# Configurar projeto
gcloud config set project \$PROJECT_ID 2>/dev/null

# Remover qualquer impersona√ß√£o
gcloud config unset auth/impersonate_service_account 2>/dev/null

# Configurar vari√°veis de ambiente
export GOOGLE_APPLICATION_CREDENTIALS="/root/.config/gcloud/application_default_credentials.json"
export GOOGLE_CLOUD_PROJECT="\$PROJECT_ID"

echo "‚úÖ Credenciais simples carregadas:"
echo "   GOOGLE_APPLICATION_CREDENTIALS=\$GOOGLE_APPLICATION_CREDENTIALS"
echo "   GOOGLE_CLOUD_PROJECT=\$GOOGLE_CLOUD_PROJECT"
echo "   Projeto gcloud: \$(gcloud config get-value project 2>/dev/null)"
EOF

chmod +x /app/gcloud-config/simple_credentials.sh

# Salvar no volume
echo "üíæ Salvando no volume persistente..."
cp -r "$GCLOUD_CONFIG_DIR"/* "$VOLUME_CONFIG_DIR/" 2>/dev/null || true

# Testar funcionamento
echo ""
echo "üß™ Testando configura√ß√£o simples..."
python test_api_working.py

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ FUNCIONANDO PERFEITAMENTE!"
    echo "============================="
    echo ""
    echo "‚úÖ Application Default Credentials funcionando"
    echo "‚úÖ Google Cloud Vision API testada"
    echo "‚úÖ Configura√ß√£o salva no volume persistente"
    echo ""
    echo "üìã Para usar em futuras sess√µes:"
    echo "   source /app/gcloud-config/simple_credentials.sh"
    echo ""
    echo "üöÄ Agora voc√™ pode executar:"
    echo "   python main.py"
    echo ""
    echo "üí° Esta configura√ß√£o:"
    echo "   ‚úÖ √â simples e direta"
    echo "   ‚úÖ Funciona imediatamente"
    echo "   ‚úÖ Dura v√°rias semanas/meses"
    echo "   ‚úÖ Compat√≠vel com pol√≠ticas organizacionais"
    
    # Adicionar ao bashrc
    if ! grep -q "source /app/gcloud-config/simple_credentials.sh" ~/.bashrc 2>/dev/null; then
        echo "source /app/gcloud-config/simple_credentials.sh" >> ~/.bashrc
        echo "‚úÖ Configura√ß√£o adicionada ao .bashrc"
    fi
    
else
    echo ""
    echo "‚ùå Ainda h√° problemas. Vamos tentar habilitar as APIs:"
    echo "   ./enable_required_apis.sh"
fi 