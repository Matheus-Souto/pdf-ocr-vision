#!/bin/bash

echo "üîç Verifica√ß√£o de Status de Autentica√ß√£o Google Cloud"
echo "===================================================="

# Definir diret√≥rios
GCLOUD_CONFIG_DIR="/root/.config/gcloud"
VOLUME_CONFIG_DIR="/app/gcloud-config"
PROJECT_ID="stable-chain-455617-v1"

# Verificar instala√ß√£o do gcloud
echo "üì¶ Verificando instala√ß√£o do Google Cloud CLI..."
if command -v gcloud &> /dev/null; then
    GCLOUD_VERSION=$(gcloud version --format="value(Google Cloud SDK)")
    echo "‚úÖ Google Cloud CLI instalado - Vers√£o: $GCLOUD_VERSION"
else
    echo "‚ùå Google Cloud CLI n√£o encontrado!"
    exit 1
fi

# Verificar arquivos de credenciais
echo ""
echo "üìÅ Verificando arquivos de credenciais..."

echo "   Volume persistente ($VOLUME_CONFIG_DIR):"
if [ -d "$VOLUME_CONFIG_DIR" ]; then
    if [ -f "$VOLUME_CONFIG_DIR/application_default_credentials.json" ]; then
        echo "   ‚úÖ application_default_credentials.json encontrado"
    else
        echo "   ‚ùå application_default_credentials.json N√ÉO encontrado"
    fi
    
    if [ -f "$VOLUME_CONFIG_DIR/configurations/config_default" ]; then
        echo "   ‚úÖ configura√ß√µes do gcloud encontradas"
    else
        echo "   ‚ùå configura√ß√µes do gcloud N√ÉO encontradas"
    fi
else
    echo "   ‚ùå Diret√≥rio do volume n√£o existe"
fi

echo ""
echo "   Diret√≥rio local ($GCLOUD_CONFIG_DIR):"
if [ -d "$GCLOUD_CONFIG_DIR" ]; then
    if [ -f "$GCLOUD_CONFIG_DIR/application_default_credentials.json" ]; then
        echo "   ‚úÖ application_default_credentials.json encontrado"
    else
        echo "   ‚ùå application_default_credentials.json N√ÉO encontrado"
    fi
    
    if [ -f "$GCLOUD_CONFIG_DIR/configurations/config_default" ]; then
        echo "   ‚úÖ configura√ß√µes do gcloud encontradas"
    else
        echo "   ‚ùå configura√ß√µes do gcloud N√ÉO encontradas"
    fi
else
    echo "   ‚ùå Diret√≥rio local n√£o existe"
fi

# Verificar vari√°veis de ambiente
echo ""
echo "üåç Verificando vari√°veis de ambiente..."
if [ -n "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
    echo "   GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
    if [ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
        echo "   ‚úÖ Arquivo existe"
    else
        echo "   ‚ùå Arquivo n√£o existe"
    fi
else
    echo "   GOOGLE_APPLICATION_CREDENTIALS: N√ÉO DEFINIDA"
    echo "   üí° Usar√° Application Default Credentials"
fi

if [ -n "$GOOGLE_CLOUD_PROJECT" ]; then
    echo "   GOOGLE_CLOUD_PROJECT: $GOOGLE_CLOUD_PROJECT"
else
    echo "   GOOGLE_CLOUD_PROJECT: N√ÉO DEFINIDA"
fi

# Verificar configura√ß√£o do gcloud
echo ""
echo "‚öôÔ∏è Verificando configura√ß√£o do gcloud..."

# Verificar projeto ativo
CURRENT_PROJECT=$(gcloud config get-value project 2>/dev/null)
if [ -n "$CURRENT_PROJECT" ]; then
    echo "   Projeto ativo: $CURRENT_PROJECT"
    if [ "$CURRENT_PROJECT" = "$PROJECT_ID" ]; then
        echo "   ‚úÖ Projeto correto configurado"
    else
        echo "   ‚ö†Ô∏è Projeto diferente do esperado ($PROJECT_ID)"
    fi
else
    echo "   ‚ùå Nenhum projeto configurado"
fi

# Verificar conta ativa
CURRENT_ACCOUNT=$(gcloud config get-value account 2>/dev/null)
if [ -n "$CURRENT_ACCOUNT" ]; then
    echo "   Conta ativa: $CURRENT_ACCOUNT"
else
    echo "   ‚ùå Nenhuma conta configurada"
fi

# Testar autentica√ß√£o gcloud
echo ""
echo "üß™ Testando autentica√ß√£o do gcloud..."
if gcloud auth list --filter=status:ACTIVE --format="value(account)" >/dev/null 2>&1; then
    ACTIVE_ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null)
    echo "‚úÖ Autentica√ß√£o do gcloud funcionando - Conta: $ACTIVE_ACCOUNT"
else
    echo "‚ùå Problema com autentica√ß√£o do gcloud"
fi

# Testar Application Default Credentials
echo ""
echo "üß™ Testando Application Default Credentials..."
python3 -c "
import os
from google.cloud import vision
from google.auth.exceptions import DefaultCredentialsError

try:
    client = vision.ImageAnnotatorClient()
    print('‚úÖ Application Default Credentials funcionando')
except DefaultCredentialsError as e:
    print(f'‚ùå Erro com Application Default Credentials: {e}')
except Exception as e:
    print(f'‚ùå Erro inesperado: {e}')
    print(f'   Tipo: {type(e)}')
"

echo ""
echo "üìã Resumo do diagn√≥stico:"
echo "========================"

# Resumir problemas encontrados
PROBLEMS=0

if [ ! -f "$VOLUME_CONFIG_DIR/application_default_credentials.json" ]; then
    echo "‚ùå Credenciais n√£o encontradas no volume persistente"
    PROBLEMS=$((PROBLEMS + 1))
fi

if [ ! -f "$GCLOUD_CONFIG_DIR/application_default_credentials.json" ]; then
    echo "‚ùå Credenciais n√£o encontradas no diret√≥rio local"
    PROBLEMS=$((PROBLEMS + 1))
fi

if [ "$CURRENT_PROJECT" != "$PROJECT_ID" ]; then
    echo "‚ùå Projeto incorreto ou n√£o configurado"
    PROBLEMS=$((PROBLEMS + 1))
fi

if [ -z "$CURRENT_ACCOUNT" ]; then
    echo "‚ùå Nenhuma conta autenticada no gcloud"
    PROBLEMS=$((PROBLEMS + 1))
fi

if [ $PROBLEMS -eq 0 ]; then
    echo "‚úÖ Nenhum problema √≥bvio detectado"
    echo "üí° Se ainda h√° problemas, as credenciais podem ter expirado"
    echo "üí° Execute: ./fix_auth_persistent.sh"
else
    echo "‚ö†Ô∏è $PROBLEMS problema(s) detectado(s)"
    echo ""
    echo "üí° Solu√ß√µes recomendadas:"
    echo "   1. Se nunca configurou: ./setup_gcloud_persistent.sh"
    echo "   2. Se j√° configurou antes: ./fix_auth_persistent.sh"
fi 