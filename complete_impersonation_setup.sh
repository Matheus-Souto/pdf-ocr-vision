#!/bin/bash

echo "ü§ñ Configura√ß√£o Completa de Impersona√ß√£o"
echo "========================================"

PROJECT_ID="stable-chain-455617-v1"
SERVICE_ACCOUNT_EMAIL="pdf-ocr-vision-sa@stable-chain-455617-v1.iam.gserviceaccount.com"
GCLOUD_CONFIG_DIR="/root/.config/gcloud"
VOLUME_CONFIG_DIR="/app/gcloud-config"

echo "üìã Configurando base para impersona√ß√£o..."
echo "   Projeto: $PROJECT_ID"
echo "   Service Account: $SERVICE_ACCOUNT_EMAIL"
echo ""

# Verificar se est√° autenticado
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" >/dev/null 2>&1; then
    echo "‚ùå Voc√™ precisa estar autenticado primeiro!"
    echo "üí° Execute: gcloud auth login --no-launch-browser"
    exit 1
fi

CURRENT_ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null)
echo "‚úÖ Conta autenticada: $CURRENT_ACCOUNT"

# Configurar projeto
gcloud config set project $PROJECT_ID

# Etapa 1: Configurar Application Default Credentials (base para impersona√ß√£o)
echo ""
echo "üîß Etapa 1: Configurando Application Default Credentials..."
echo "‚ö†Ô∏è Estas credenciais s√£o necess√°rias como 'fonte' para a impersona√ß√£o"
echo ""

gcloud auth application-default login --no-launch-browser

if [ $? -ne 0 ]; then
    echo "‚ùå Falha ao configurar Application Default Credentials"
    exit 1
fi

echo "‚úÖ Application Default Credentials configuradas!"

# Etapa 2: Configurar impersona√ß√£o
echo ""
echo "üé≠ Etapa 2: Ativando impersona√ß√£o da Service Account..."
gcloud config set auth/impersonate_service_account $SERVICE_ACCOUNT_EMAIL

# Etapa 3: Salvar configura√ß√£o no volume
echo ""
echo "üíæ Etapa 3: Salvando no volume persistente..."
cp -r "$GCLOUD_CONFIG_DIR"/* "$VOLUME_CONFIG_DIR/" 2>/dev/null || true

# Etapa 4: Criar script de ativa√ß√£o
echo ""
echo "üìÑ Etapa 4: Criando scripts de ativa√ß√£o..."

# Script para carregar impersona√ß√£o
cat > /app/gcloud-config/activate_impersonation.sh << EOF
#!/bin/bash
# Ativa√ß√£o de impersona√ß√£o de Service Account

PROJECT_ID="$PROJECT_ID"
SERVICE_ACCOUNT_EMAIL="$SERVICE_ACCOUNT_EMAIL"

# Restaurar configura√ß√£o do gcloud
if [ -d "/app/gcloud-config" ]; then
    cp -r /app/gcloud-config/* /root/.config/gcloud/ 2>/dev/null || true
fi

# Configurar projeto e impersona√ß√£o
gcloud config set project \$PROJECT_ID
gcloud config set auth/impersonate_service_account \$SERVICE_ACCOUNT_EMAIL

# Configurar vari√°veis de ambiente
export GOOGLE_CLOUD_PROJECT="\$PROJECT_ID"
export GCLOUD_IMPERSONATE_SERVICE_ACCOUNT="\$SERVICE_ACCOUNT_EMAIL"

echo "‚úÖ Impersona√ß√£o ativada:"
echo "   Projeto: \$PROJECT_ID"
echo "   Service Account: \$SERVICE_ACCOUNT_EMAIL"
echo "   Conta base: \$(gcloud config get-value account)"
EOF

chmod +x /app/gcloud-config/activate_impersonation.sh

# Script de teste com impersona√ß√£o
cat > /app/test_impersonation.py << 'EOF'
#!/usr/bin/env python3
"""
Teste espec√≠fico para impersona√ß√£o de Service Account
"""

import os
from google.cloud import vision
from google.auth import impersonated_credentials
from google.auth import default

def test_impersonation():
    """Testa impersona√ß√£o de Service Account"""
    print("üß™ Testando impersona√ß√£o de Service Account...")
    
    try:
        # Obter credenciais base (Application Default)
        source_credentials, project = default()
        print(f"‚úÖ Credenciais base obtidas para projeto: {project}")
        
        # Configurar impersona√ß√£o
        service_account = os.getenv('GCLOUD_IMPERSONATE_SERVICE_ACCOUNT')
        if not service_account:
            service_account = "pdf-ocr-vision-sa@stable-chain-455617-v1.iam.gserviceaccount.com"
        
        print(f"üé≠ Impersonando: {service_account}")
        
        target_credentials = impersonated_credentials.Credentials(
            source_credentials=source_credentials,
            target_principal=service_account,
            target_scopes=['https://www.googleapis.com/auth/cloud-platform']
        )
        
        # Criar cliente Vision com credenciais impersonadas
        client = vision.ImageAnnotatorClient(credentials=target_credentials)
        print("‚úÖ Cliente Vision criado com impersona√ß√£o!")
        
        # Teste m√≠nimo da API
        image = vision.Image()
        response = client.text_detection(image=image)
        
        if response.error.message:
            print(f"‚ùå Erro da API: {response.error.message}")
            return False
        
        print("‚úÖ API Vision funcionando com impersona√ß√£o!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na impersona√ß√£o: {e}")
        print(f"   Tipo: {type(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ Teste de Impersona√ß√£o Google Cloud Vision")
    print("=" * 50)
    
    # Configurar vari√°veis
    os.environ['GOOGLE_CLOUD_PROJECT'] = 'stable-chain-455617-v1'
    os.environ['GCLOUD_IMPERSONATE_SERVICE_ACCOUNT'] = 'pdf-ocr-vision-sa@stable-chain-455617-v1.iam.gserviceaccount.com'
    
    if test_impersonation():
        print("\nüéâ SUCESSO: Impersona√ß√£o funcionando perfeitamente!")
        exit(0)
    else:
        print("\n‚ùå FALHA: Problema com impersona√ß√£o")
        exit(1)
EOF

chmod +x /app/test_impersonation.py

# Etapa 5: Testar configura√ß√£o completa
echo ""
echo "üß™ Etapa 5: Testando configura√ß√£o completa..."

# Configurar vari√°veis de ambiente
export GOOGLE_CLOUD_PROJECT="$PROJECT_ID"
export GCLOUD_IMPERSONATE_SERVICE_ACCOUNT="$SERVICE_ACCOUNT_EMAIL"

# Executar teste
python /app/test_impersonation.py

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ CONFIGURA√á√ÉO COMPLETA E FUNCIONANDO!"
    echo "======================================"
    echo ""
    echo "‚úÖ Application Default Credentials configuradas"
    echo "‚úÖ Service Account configurada"
    echo "‚úÖ Impersona√ß√£o ativada"
    echo "‚úÖ Google Cloud Vision API testada"
    echo "‚úÖ Configura√ß√£o salva no volume persistente"
    echo ""
    echo "üìã Para usar em futuras sess√µes:"
    echo "   source /app/gcloud-config/activate_impersonation.sh"
    echo ""
    echo "üöÄ Para testar novamente:"
    echo "   python /app/test_impersonation.py"
    echo ""
    echo "üí° Esta configura√ß√£o:"
    echo "   ‚úÖ N√£o expira (Service Account)"
    echo "   ‚úÖ Respeita pol√≠ticas organizacionais"
    echo "   ‚úÖ Audit trail completo"
    echo "   ‚úÖ Funciona indefinidamente"
    
    # Adicionar ao bashrc
    if ! grep -q "source /app/gcloud-config/activate_impersonation.sh" ~/.bashrc 2>/dev/null; then
        echo "source /app/gcloud-config/activate_impersonation.sh" >> ~/.bashrc
        echo "‚úÖ Configura√ß√£o adicionada ao .bashrc"
    fi
    
else
    echo ""
    echo "‚ùå Ainda h√° problemas. Diagn√≥stico:"
    echo "   Conta ativa: $(gcloud config get-value account)"
    echo "   Projeto: $(gcloud config get-value project)"
    echo "   Impersona√ß√£o: $(gcloud config get-value auth/impersonate_service_account)"
    echo ""
    echo "üí° Tente novamente ou use a solu√ß√£o simples:"
    echo "   ./fix_current_auth.sh"
fi 